1. .env < env.example
2. pip install -r requirements.txt
3. python manage.py makemigrations
4. python manage.py migrate
5. python manage.py collectstatic
6. python manage.py createsuperuser
7. python manage.py runserver


== live deploy == 
1. sh deploy.sh
2. docker ps // list of running containers 
2. docker start/stop/restart <container-id> || docker restart <container_id> || docker exec -it <container_id> bash

== Transfer file to remote server from windows ==
go to file location >> pscp -P 22 <filename.extension> root@<remote-ip>:<file-location>
example: pacecloud || hi@PCuser#2!
pscp -P 22 urls.py root@103.123.8.30:/var/www/html/ambalaWireless/nf_api
pscp -P 22 views.py root@103.123.8.30:/var/www/html/ambalaWireless/nf_api
pscp -P 22 tasks.py root@103.123.8.30:/var/www/html/ambalaWireless/nf_core
example: srv1
pscp -P 22 tasks.py root@103.174.51.20:/home/nf_docker_project/production/nf_core

git add . ; git commit -am "delivery status done" ; git status

// from srv1
@shared_task(bind=True, default_retry_delay=30, max_retries=3)
def updateSMSStatus_05042023(self, *args, **kwargs):
    try:
        json_payload = kwargs
        sms_instance = SMSHistory.objects.get(id=json_payload['sms_id'], user_id=json_payload['user_id'])
        sms_instance.shoot_id = json_payload['shoot_id']
        sms_instance.receiver = json_payload['receiver']
        sms_instance.sender_id = json_payload['sender_id']
        sms_instance.status = json_payload['status']
        sms_instance.failure_reason = json_payload['failure_reason']
        sms_instance.save()

        if sms_instance.shoot_id is not None:
            ########### Check SMS Delivery Status here ###########
            response = getDeliveryStatus(sms_instance.sender_id, sms_instance.receiver, sms_instance.shoot_id)
            sms_instance.api_response = response
            sms_instance.save()
            ########### End Check SMS Delivery Status here ###########

            if int(response['Status']) < 0:
                sms_instance.status = "Failed"
                sms_instance.failure_reason = f"Error Code: {response['ErrorCode']} | Message: {response['ErrorText']}"
            else:
                check_counter = 0
                while int(response['Status']) == 0 or int(response['Status']) == 2:
                    if check_counter >= 5:
                        break
                    response = getDeliveryStatus(sms_instance.sender_id, sms_instance.receiver, sms_instance.shoot_id)
                    check_counter += 1
                    time.sleep(10)
                sms_instance.api_response = response
                sms_instance.save()
                if int(response['Status']) < 0:
                    sms_instance.status = "Failed"
                    sms_instance.failure_reason = f"Error Code: {response['ErrorCode']} | Message: {response['ErrorText']}"
                else:
                    if int(response['Status']) == 0:
                        sms_instance.status = "Submitted"
                    elif int(response['Status']) == 1:
                        # Successfully transmitted
                        sms_instance.status = "Delivered"
                    elif int(response['Status']) == 2:
                        sms_instance.status = "Processing"
                    sms_instance.save()
        SMSQueueHandler.objects.filter(sms_id=json_payload['sms_id'], user_id=json_payload['user_id']).delete()
    except Exception:
        self.retry()
